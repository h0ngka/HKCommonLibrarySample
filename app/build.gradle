apply plugin: 'com.android.application'

android {
    compileSdkVersion shared.compileSdkVersion
    buildToolsVersion shared.buildToolVersion

    defaultConfig {
        applicationId "com.hongka.hkcommonlibrarysample"
        minSdkVersion shared.minSdkVersion
        targetSdkVersion shared.targetSdkVersion
        versionCode 1
        versionName "1.0.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    productFlavors {
        dev {
            minSdkVersion 21
        }
        prod {
            minSdkVersion shared.minSdkVersion
        }
    }

    buildTypes {
        debug {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            proguardFile 'proguard-debug.pro'
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    // 특정 buildTypes 비노출
    // http://gun0912.tistory.com/76
    variantFilter { variant ->
        def buildName = variant.buildType.name;
        def flavorName = variant.getFlavors().get(0).name;

        if (flavorName == 'prod' & buildName == 'release'
            || flavorName == 'dev' & buildName == 'release') {
            variant.setIgnore(true);
        }
    }

    dataBinding {
        enabled = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
}

repositories {
    maven { url 'https://jitpack.io' }
}

def hkCommonLibraryRelativeDir = new File('../HKCommonLibrary/hkcommonlibrary')

dependencies {
    compileDefault project
    compile 'com.android.support:support-v4'
    compile 'com.android.support:design'
    compile 'com.android.support:recyclerview-v7'
    compile 'com.github.bumptech.glide:glide'
    compile hkCommonLibraryRelativeDir.exists() ? project(':HKCommonLibrary') : 'com.github.h0ngka:HKCommonLibrary'
    compile 'com.google.android.exoplayer:exoplayer'
    compile 'com.github.feeeei:CircleSeekbar'
    compile 'com.github.HaarigerHarald:android-youtubeExtractor'
    compile "com.google.guava:guava:18.0"

    // For Lifecycles, LiveData, and ViewModel
    compile "android.arch.lifecycle:runtime:1.0.0-alpha3"
    compile "android.arch.lifecycle:extensions:1.0.0-alpha3"
    annotationProcessor "android.arch.lifecycle:compiler:1.0.0-alpha3"
}

// Task Coding Test
task sayHello << {
    println "Hello Gradle!"
}

def greetings = "greetings";
task sayHelloGroup(group:greetings) << {
    println "greetings -> Hello Gradle!"
}

// commond line에서 tasks 명령어를 치며 description 내용을 확인 할수 있다.
task sayHelloGroupDescriptions(group:greetings, description:"my greetings is hello") << {
    println "greetings -> Hello Gradle!"
}

// 어떤 task를 내 task보다 먼저 실행해야 한다면 'dependsOn'이라는 속성으로 지정합니다.
task sayHelloGroupDescriptionsDependsOn(group:greetings,
        description:"my greetings is hello",
        dependsOn:"meetingPeople") {
//    println "greetings -> Hello Gradle!"

    doFirst {
        println "Look at me"
    }

    doLast {
        println "Hello Gradle"
    }
}

task meetingPeople(group: greetings) << {
    println "I met some people"
}
